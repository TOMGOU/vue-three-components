{"version":3,"file":"Ripple.stories-4e6664af.js","sources":["../../packages/Ripple/shader/vertex.ts","../../packages/Ripple/shader/fragment.ts","../../packages/Ripple/index.ts","../../src/stories/components/ripple/index.vue"],"sourcesContent":["const vertexShader = /*glsl*/ `\n  precision lowp float;\n  attribute vec3 position;\n  attribute vec2 uv;\n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  varying vec2 vUv;\n  varying float vElevation;\n\n  void main(){\n      vUv = uv;\n      vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\n\n      modelPosition.z = sin((modelPosition.x+uTime*100.0) * .015)*100.0;\n      modelPosition.z += sin((modelPosition.y+uTime*100.0)  * .015)*100.0;\n      vElevation = modelPosition.z;\n\n      gl_Position = projectionMatrix * viewMatrix * modelPosition;\n  }\n`\n\nexport default vertexShader\n","const fragmentShader = /*glsl*/ `\n  precision lowp float;\n  varying vec2 vUv;\n  varying float vElevation;\n\n  uniform sampler2D uTexture; \n\n  void main(){\n      float height = vElevation + 1.0;\n      vec4 textureColor = texture2D(uTexture, vUv);\n      // textureColor.rgb *= height;\n      gl_FragColor = textureColor;\n  }\n`\n\nexport default fragmentShader\n","import * as THREE from 'three'\nimport vertexShader from './shader/vertex'\nimport fragmentShader from './shader/fragment'\n\nconst createRipple = (url = '/sign-in_bg.png', width = 8.5, height = 4.2) => {\n  const textureLoader = new THREE.TextureLoader()\n  const texture = textureLoader.load(url)\n\n  const rawShaderMaterial = new THREE.RawShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side: THREE.DoubleSide,\n    uniforms: {\n      uTime: {\n        value: 0\n      },\n      uTexture: {\n        value: texture\n      }\n    }\n  })\n\n  const clock = new THREE.Clock()\n  function animate() {\n    const elapsedTime = clock.getElapsedTime()\n    rawShaderMaterial.uniforms.uTime.value = elapsedTime\n    requestAnimationFrame(animate)\n  }\n\n  animate()\n\n  const ripper = new THREE.Mesh(new THREE.PlaneGeometry(width, height, 64, 64), rawShaderMaterial)\n\n  return ripper\n}\n\nexport { createRipple }\n","<template>\n  <div id=\"Ripple\"></div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onBeforeUpdate, ref, onBeforeMount } from 'vue';\nimport * as THREE from 'three'\n// import { controls } from '../basic/controls'\nimport { scene, renderer, camera } from '../basic/three'\nimport { createRipple } from '../../../../packages/index'\n\n// const props = defineProps({\n//   size: {\n//     type: Number,\n//     default: 20,\n//     required: false\n//   },\n//   color: {\n//     type: String,\n//     default: '#15de1d',\n//     required: false\n//   }\n// })\n\nlet timer: any = null\n\nonBeforeMount(() => {\n  if (timer) cancelAnimationFrame(timer)\n  scene.remove.apply(scene, scene.children)\n})\n\nonMounted(() => {\n  camera.zoom = 1;\n  const Ripple = createRipple('/texture/sign-in_bg.png', 2000, 1600)\n  scene.add( Ripple );\n\n  const axesHelper = new THREE.AxesHelper(5000);\n  // scene.add(axesHelper);\n\n  const WaveElement = document.getElementById('Ripple')\n  if (WaveElement) WaveElement.appendChild(renderer.domElement)\n  const render = () => {\n    renderer.render(scene, camera)\n    camera.updateProjectionMatrix()\n    // controls.update()\n    timer = requestAnimationFrame(render)\n  }\n\n  render()\n})\n\nonBeforeUpdate(() => {\n  console.log('onBeforeUpdate')\n  renderer.clear()\n  scene.remove.apply(scene, scene.children)\n  scene.remove.apply(scene, scene.children)\n  renderer.forceContextLoss()\n  cancelAnimationFrame(timer)\n  const gl = renderer.domElement.getContext('webgl')\n  gl && gl.getExtension('WEBGL_lose_context')?.loseContext()\n})\n</script>"],"names":["vertexShader","fragmentShader","createRipple","__name","url","width","height","texture","THREE.TextureLoader","rawShaderMaterial","THREE.RawShaderMaterial","THREE.DoubleSide","clock","THREE.Clock","animate","elapsedTime","THREE.Mesh","THREE.PlaneGeometry","timer","onBeforeMount","scene","onMounted","camera","Ripple","THREE.AxesHelper","WaveElement","renderer","render","onBeforeUpdate","gl","_a"],"mappings":"2QAAA,MAAMA,EAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECAxBC,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECI1BC,EAAeC,EAAA,CAACC,EAAM,kBAAmBC,EAAQ,IAAKC,EAAS,MAAQ,CAErE,MAAAC,EADgB,IAAIC,IACI,KAAKJ,CAAG,EAEhCK,EAAoB,IAAIC,EAAwB,CACpD,aAAAV,EACA,eAAAC,EACA,KAAMU,EACN,SAAU,CACR,MAAO,CACL,MAAO,CACT,EACA,SAAU,CACR,MAAOJ,CACT,CACF,CAAA,CACD,EAEKK,EAAQ,IAAIC,EAClB,SAASC,GAAU,CACX,MAAAC,EAAcH,EAAM,iBACRH,EAAA,SAAS,MAAM,MAAQM,EACzC,sBAAsBD,CAAO,CAC/B,CAJS,OAAAX,EAAAW,EAAA,WAMDA,IAEO,IAAIE,EAAW,IAAIC,EAAoBZ,EAAOC,EAAQ,GAAI,EAAE,EAAGG,CAAiB,CAGjG,EA9BqB,6DCoBrB,IAAIS,EAAa,KAEjB,OAAAC,EAAc,IAAM,CACdD,GAAO,qBAAqBA,CAAK,EACrCE,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,CAAA,CACzC,EAEDC,EAAU,IAAM,CACdC,EAAO,KAAO,EACd,MAAMC,EAASrB,EAAa,0BAA2B,IAAM,IAAI,EACjEkB,EAAM,IAAKG,CAAO,EAEC,IAAIC,EAAiB,GAAI,EAGtC,MAAAC,EAAc,SAAS,eAAe,QAAQ,EAChDA,GAAyBA,EAAA,YAAYC,EAAS,UAAU,EAC5D,MAAMC,EAASxB,EAAA,IAAM,CACVuB,EAAA,OAAON,EAAOE,CAAM,EAC7BA,EAAO,uBAAuB,EAE9BJ,EAAQ,sBAAsBS,CAAM,CAAA,EAJvB,UAORA,GAAA,CACR,EAEDC,EAAe,IAAM,OACnB,QAAQ,IAAI,gBAAgB,EAC5BF,EAAS,MAAM,EACfN,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCA,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCM,EAAS,iBAAiB,EAC1B,qBAAqBR,CAAK,EAC1B,MAAMW,EAAKH,EAAS,WAAW,WAAW,OAAO,EACjDG,KAAMC,EAAAD,EAAG,aAAa,oBAAoB,IAApC,MAAAC,EAAuC,cAAY,CAC1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}