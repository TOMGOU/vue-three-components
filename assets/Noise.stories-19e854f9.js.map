{"version":3,"file":"Noise.stories-19e854f9.js","sources":["../../packages/Noise/shader/vertex.ts","../../packages/Noise/shader/fragment.ts","../../packages/Noise/index.ts","../../src/stories/components/noise/index.vue"],"sourcesContent":["const vertexShader = /*glsl*/ `\n  precision lowp float;\n  uniform float uWaresFrequency;\n  uniform float uScale;\n  uniform float uNoiseFrequency;\n  uniform float uNoiseScale;\n  uniform float uXzScale;\n  uniform float uTime;\n  uniform float uXspeed;\n  uniform float uZspeed;\n  uniform float uNoiseSpeed;\n\n  // 计算出的高度传递给片元着色器\n  varying float vElevation;\n\n  // 随机函数\n  float random (vec2 st) {\n      return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n  }\n\n  // 旋转函数\n  vec2 rotate(vec2 uv, float rotation, vec2 mid)\n  {\n      return vec2(\n        cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,\n        cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y\n      );\n  }\n\n  // 噪声函数\n  float noise (in vec2 _st) {\n      vec2 i = floor(_st);\n      vec2 f = fract(_st);\n\n      // Four corners in 2D of a tile\n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n\n      vec2 u = f * f * (3.0 - 2.0 * f);\n\n      return mix(a, b, u.x) +\n              (c - a)* u.y * (1.0 - u.x) +\n              (d - b) * u.x * u.y;\n  }\n\n\n  //\tClassic Perlin 2D Noise \n  //\tby Stefan Gustavson\n  //\n  vec4 permute(vec4 x)\n  {\n      return mod(((x*34.0)+1.0)*x, 289.0);\n  }\n\n  vec2 fade(vec2 t)\n  {\n      return t*t*t*(t*(t*6.0-15.0)+10.0);\n  }\n\n  float cnoise(vec2 P)\n  {\n      vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n      vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n      Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\n      vec4 ix = Pi.xzxz;\n      vec4 iy = Pi.yyww;\n      vec4 fx = Pf.xzxz;\n      vec4 fy = Pf.yyww;\n      vec4 i = permute(permute(ix) + iy);\n      vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\n      vec4 gy = abs(gx) - 0.5;\n      vec4 tx = floor(gx + 0.5);\n      gx = gx - tx;\n      vec2 g00 = vec2(gx.x,gy.x);\n      vec2 g10 = vec2(gx.y,gy.y);\n      vec2 g01 = vec2(gx.z,gy.z);\n      vec2 g11 = vec2(gx.w,gy.w);\n      vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n      g00 *= norm.x;\n      g01 *= norm.y;\n      g10 *= norm.z;\n      g11 *= norm.w;\n      float n00 = dot(g00, vec2(fx.x, fy.x));\n      float n10 = dot(g10, vec2(fx.y, fy.y));\n      float n01 = dot(g01, vec2(fx.z, fy.z));\n      float n11 = dot(g11, vec2(fx.w, fy.w));\n      vec2 fade_xy = fade(Pf.xy);\n      vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n      float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n      return 2.3 * n_xy;\n  }\n\n\n  void main(){\n      vec4 modelPosition = modelMatrix * vec4(position,1.0);\n\n      // float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed)*sin(modelPosition.z*uWaresFrequency*uXzScale+uTime*uZspeed);\n      float elevation = sin(modelPosition.x*uWaresFrequency+uTime*uXspeed) * sin(modelPosition.y*uWaresFrequency+uTime*uXspeed);\n\n      // elevation += -abs(cnoise(vec2(modelPosition.xz*uNoiseFrequency+uTime*uNoiseSpeed))) * uNoiseScale;\n      elevation += -abs(cnoise(vec2(modelPosition.xy*uNoiseFrequency+uTime*uNoiseSpeed))) * uNoiseScale;\n      \n      vElevation = elevation;\n      \n      elevation *= uScale;\n\n      // modelPosition.y += elevation;\n      modelPosition.z += elevation;\n\n      gl_Position = projectionMatrix * viewMatrix * modelPosition;\n  }\n`\n\nexport default vertexShader\n","const fragmentShader = /*glsl*/ `\n  precision lowp float;\n\n  uniform vec3 uHighColor;\n  uniform vec3 uLowColor;\n  varying float vElevation;\n  uniform float uOpacity;\n\n  void main(){\n      float a = (vElevation+1.0)/2.0;\n      vec3 color = mix(uLowColor,uHighColor,a);\n      // vec3 color = mix(vec3(1, 0, 0),vec3(1, 1, 0),a);\n      gl_FragColor = vec4(color,uOpacity);\n  }\n`\n\nexport default fragmentShader\n","import * as THREE from 'three'\nimport vertexShader from './shader/vertex'\nimport fragmentShader from './shader/fragment'\n\nconst createNoise = (uLowColor: string, uHighColor: string) => {\n  const params = {\n    uWaresFrequency: 14,\n    uScale: 0.03,\n    uXzScale: 1.5,\n    uNoiseFrequency: 10,\n    uNoiseScale: 1.5,\n    uLowColor: uLowColor || \"#ff0000\",\n    uHighColor: uHighColor || \"#ffff00\",\n    uXspeed: 1,\n    uZspeed: 1,\n    uNoiseSpeed: 1,\n    uOpacity: 1,\n    uTime: 0,\n  };\n  \n  const material = new THREE.ShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side: THREE.DoubleSide,\n    uniforms: {\n      uWaresFrequency: {\n        value: params.uWaresFrequency,\n      },\n      uScale: {\n        value: params.uScale,\n      },\n      uNoiseFrequency: {\n        value: params.uNoiseFrequency,\n      },\n      uNoiseScale: {\n        value: params.uNoiseScale,\n      },\n      uXzScale: {\n        value: params.uXzScale,\n      },\n      uTime: {\n        value: params.uTime,\n      },\n      uLowColor: {\n        value: new THREE.Color(params.uLowColor),\n      },\n      uHighColor: {\n        value: new THREE.Color(params.uHighColor),\n      },\n      uXspeed: {\n        value: params.uXspeed,\n      },\n      uZspeed: {\n        value: params.uZspeed,\n      },\n      uNoiseSpeed: {\n        value: params.uNoiseSpeed,\n      },\n      uOpacity: {\n        value: params.uOpacity,\n      },\n    },\n    transparent: true,\n  });\n  const geometry = new THREE.PlaneGeometry(3, 2, 1024, 1024);\n  // const material = new THREE.ShaderMaterial({\n  //   vertexShader,\n  //   fragmentShader,\n  //   uniforms: {\n  //     // 动画时间\n  //     uTime: {\n  //       value: 0\n  //     }\n  //   },\n  //   side: THREE.DoubleSide,\n  //   transparent: true,\n  //   depthTest: true,\n  //   depthWrite: true,\n  //   // depthFunc: THREE.LessEqualDepth,\n  //   // alphaTest: 0.2\n  //   // blending: THREE.CustomBlending,\n  //   // blendSrc: THREE.SrcAlphaFactor,\n  //   // blendDst: THREE.OneMinusSrcAlphaFactor\n  // })\n  const mesh = new THREE.Mesh(geometry, material) //网格模型对象Mesh\n  mesh.name = 'noise'\n\n  const clock = new THREE.Clock()\n  function animate() {\n    const elapsedTime = clock.getElapsedTime()\n    material.uniforms.uTime.value = elapsedTime\n    requestAnimationFrame(animate)\n  }\n\n  animate()\n\n  return mesh\n}\n\nexport { createNoise }\n","<template>\n  <div id=\"noise\"></div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onBeforeUpdate, watch, onBeforeMount } from 'vue';\nimport * as THREE from 'three'\nimport { scene, renderer, camera } from '../basic/three'\nimport { controls } from '../basic/controls'\nimport { createNoise } from '../../../../packages/index'\n\nconst props = defineProps({\n  uLowColor: {\n    type: String,\n    default: '#ff0000',\n    required: false\n  },\n  uHighColor: {\n    type: String,\n    default: '#ffff00',\n    required: false\n  }\n})\n\nlet timer: any = null\n\nonBeforeMount(() => {\n  if (timer) cancelAnimationFrame(timer)\n  scene.remove.apply(scene, scene.children)\n})\n\nonMounted(() => {\n  const NoiseMesh = createNoise(props.uLowColor, props.uHighColor)\n  // NoiseMesh.rotateX(1.7)\n  camera.zoom = 1000;\n  // camera.updateProjectionMatrix();\n  scene.add( NoiseMesh );\n  const axesHelper = new THREE.AxesHelper(1000);\n  // scene.add(axesHelper);\n  const NoiseElement = document.getElementById('noise')\n  if (NoiseElement) NoiseElement.appendChild(renderer.domElement)\n  const render = () => {\n    renderer.render(scene, camera)\n    camera.updateProjectionMatrix()\n    // controls.update()\n    timer = requestAnimationFrame(render)\n  }\n\n  render()\n})\n\nonBeforeUpdate(() => {\n  console.log('onBeforeUpdate')\n  renderer.clear()\n  scene.remove.apply(scene, scene.children)\n  scene.remove.apply(scene, scene.children)\n  renderer.forceContextLoss()\n  cancelAnimationFrame(timer)\n  const gl = renderer.domElement.getContext('webgl')\n  gl && gl.getExtension('WEBGL_lose_context')?.loseContext()\n})\n</script>"],"names":["vertexShader","fragmentShader","createNoise","__name","uLowColor","uHighColor","params","material","THREE.ShaderMaterial","THREE.DoubleSide","THREE.Color","geometry","THREE.PlaneGeometry","mesh","THREE.Mesh","clock","THREE.Clock","animate","elapsedTime","timer","onBeforeMount","scene","onMounted","NoiseMesh","props","camera","THREE.AxesHelper","NoiseElement","renderer","render","onBeforeUpdate","gl","_a"],"mappings":"2QAAA,MAAMA,EAAwxBC,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECI1BC,EAAcC,EAAA,CAACC,EAAmBC,IAAuB,CAC7D,MAAMC,EAAS,CACb,gBAAiB,GACjB,OAAQ,IACR,SAAU,IACV,gBAAiB,GACjB,YAAa,IACb,UAAWF,GAAa,UACxB,WAAYC,GAAc,UAC1B,QAAS,EACT,QAAS,EACT,YAAa,EACb,SAAU,EACV,MAAO,CAAA,EAGHE,EAAW,IAAIC,EAAqB,CACxC,aAAAR,EACA,eAAAC,EACA,KAAMQ,EACN,SAAU,CACR,gBAAiB,CACf,MAAOH,EAAO,eAChB,EACA,OAAQ,CACN,MAAOA,EAAO,MAChB,EACA,gBAAiB,CACf,MAAOA,EAAO,eAChB,EACA,YAAa,CACX,MAAOA,EAAO,WAChB,EACA,SAAU,CACR,MAAOA,EAAO,QAChB,EACA,MAAO,CACL,MAAOA,EAAO,KAChB,EACA,UAAW,CACT,MAAO,IAAII,EAAYJ,EAAO,SAAS,CACzC,EACA,WAAY,CACV,MAAO,IAAII,EAAYJ,EAAO,UAAU,CAC1C,EACA,QAAS,CACP,MAAOA,EAAO,OAChB,EACA,QAAS,CACP,MAAOA,EAAO,OAChB,EACA,YAAa,CACX,MAAOA,EAAO,WAChB,EACA,SAAU,CACR,MAAOA,EAAO,QAChB,CACF,EACA,YAAa,EAAA,CACd,EACKK,EAAW,IAAIC,EAAoB,EAAG,EAAG,KAAM,IAAI,EAoBnDC,EAAO,IAAIC,EAAWH,EAAUJ,CAAQ,EAC9CM,EAAK,KAAO,QAEN,MAAAE,EAAQ,IAAIC,EAClB,SAASC,GAAU,CACX,MAAAC,EAAcH,EAAM,iBACjBR,EAAA,SAAS,MAAM,MAAQW,EAChC,sBAAsBD,CAAO,CAC/B,CAJS,OAAAd,EAAAc,EAAA,WAMDA,IAEDJ,CACT,EA7FoB,0LCoBpB,IAAIM,EAAa,KAEjB,OAAAC,EAAc,IAAM,CACdD,GAAO,qBAAqBA,CAAK,EACrCE,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,CAAA,CACzC,EAEDC,EAAU,IAAM,CACd,MAAMC,EAAYrB,EAAYsB,EAAM,UAAWA,EAAM,UAAU,EAE/DC,EAAO,KAAO,IAEdJ,EAAM,IAAKE,CAAU,EACF,IAAIG,EAAiB,GAAI,EAEtC,MAAAC,EAAe,SAAS,eAAe,OAAO,EAChDA,GAA2BA,EAAA,YAAYC,EAAS,UAAU,EAC9D,MAAMC,EAAS1B,EAAA,IAAM,CACVyB,EAAA,OAAOP,EAAOI,CAAM,EAC7BA,EAAO,uBAAuB,EAE9BN,EAAQ,sBAAsBU,CAAM,CAAA,EAJvB,UAORA,GAAA,CACR,EAEDC,EAAe,IAAM,OACnB,QAAQ,IAAI,gBAAgB,EAC5BF,EAAS,MAAM,EACfP,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCA,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCO,EAAS,iBAAiB,EAC1B,qBAAqBT,CAAK,EAC1B,MAAMY,EAAKH,EAAS,WAAW,WAAW,OAAO,EACjDG,KAAMC,EAAAD,EAAG,aAAa,oBAAoB,IAApC,MAAAC,EAAuC,cAAY,CAC1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}