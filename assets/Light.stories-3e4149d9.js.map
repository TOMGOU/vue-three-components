{"version":3,"file":"Light.stories-3e4149d9.js","sources":["../../packages/Light/shader/vertex.ts","../../packages/Light/shader/fragment.ts","../../packages/Light/index.ts","../../src/stories/components/light/index.vue"],"sourcesContent":["const vertexShader = /*glsl*/ `\n  precision lowp float;\n  attribute vec3 position;\n  attribute vec2 uv;\n  uniform mat4 modelMatrix;\n  uniform mat4 viewMatrix;\n  uniform mat4 projectionMatrix;\n  uniform float uTime;\n  varying vec2 vUv;\n\n  void main(){\n      vUv = uv;\n      vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\n\n      gl_Position = projectionMatrix * viewMatrix * modelPosition;\n  }\n`\n\nexport default vertexShader\n","const fragmentShader = /*glsl*/ `\n  // precision lowp float;\n  // varying vec2 vUv;\n  // varying float vElevation;\n\n  // uniform sampler2D uTexture; \n\n  // void main(){\n  //     float height = vElevation + 1.0;\n  //     vec4 textureColor = texture2D(uTexture, vUv);\n  //     gl_FragColor = textureColor;\n  // }\n\n  precision highp float;\n  uniform float uTime;\n  varying vec2 vUv;\n\n  void main(){\n    vec3 c;\n    float l,z=uTime;\n    for(int i=0;i<3;i++) {\n      vec2 uv,p=vUv;\n      uv=vUv;\n      p-=.5;\n      p.x*=vUv.x/vUv.y;\n      z+=.07;\n      l=length(p);\n      uv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z-z));\n      c[i]=.01/length(mod(uv,1.)-.5);\n    }\n    gl_FragColor=vec4(c/l,uTime);\n  }\n`\n\nexport default fragmentShader\n","import * as THREE from 'three'\nimport vertexShader from './shader/vertex'\nimport fragmentShader from './shader/fragment'\n\nconst createLight = (width = 8.5, height = 4.2) => {\n  const rawShaderMaterial = new THREE.RawShaderMaterial({\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    side: THREE.DoubleSide,\n    uniforms: {\n      uTime: {\n        value: 0\n      },\n    }\n  })\n\n  const clock = new THREE.Clock()\n  function animate() {\n    const elapsedTime = clock.getElapsedTime()\n    rawShaderMaterial.uniforms.uTime.value = elapsedTime\n    requestAnimationFrame(animate)\n  }\n\n  animate()\n\n  const ripper = new THREE.Mesh(new THREE.PlaneGeometry(width, height, 64, 64), rawShaderMaterial)\n\n  return ripper\n}\n\nexport { createLight }\n","<template>\n  <div id=\"Light\"></div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, onBeforeUpdate, ref, onBeforeMount } from 'vue';\nimport * as THREE from 'three'\n// import { controls } from '../basic/controls'\nimport { scene, renderer, camera } from '../basic/three'\nimport { createLight } from '../../../../packages/index'\n\nconst props = defineProps({\n  width: {\n    type: Number,\n    default: 20,\n    required: false\n  },\n  height: {\n    type: Number,\n    default: 20,\n    required: false\n  },\n})\n\nlet timer: any = null\n\nonBeforeMount(() => {\n  if (timer) cancelAnimationFrame(timer)\n  scene.remove.apply(scene, scene.children)\n})\n\nonMounted(() => {\n  camera.zoom = 1;\n  const Light = createLight(props.width, props.height)\n  scene.add( Light );\n\n  const axesHelper = new THREE.AxesHelper(5000);\n  // scene.add(axesHelper);\n\n  const WaveElement = document.getElementById('Light')\n  if (WaveElement) WaveElement.appendChild(renderer.domElement)\n  const render = () => {\n    renderer.render(scene, camera)\n    camera.updateProjectionMatrix()\n    // controls.update()\n    timer = requestAnimationFrame(render)\n  }\n\n  render()\n})\n\nonBeforeUpdate(() => {\n  console.log('onBeforeUpdate')\n  renderer.clear()\n  scene.remove.apply(scene, scene.children)\n  scene.remove.apply(scene, scene.children)\n  renderer.forceContextLoss()\n  cancelAnimationFrame(timer)\n  const gl = renderer.domElement.getContext('webgl')\n  gl && gl.getExtension('WEBGL_lose_context')?.loseContext()\n})\n</script>"],"names":["vertexShader","fragmentShader","createLight","__name","width","height","rawShaderMaterial","THREE.RawShaderMaterial","THREE.DoubleSide","clock","THREE.Clock","animate","elapsedTime","THREE.Mesh","THREE.PlaneGeometry","timer","onBeforeMount","scene","onMounted","camera","Light","props","THREE.AxesHelper","WaveElement","renderer","render","onBeforeUpdate","gl","_a"],"mappings":"oQAAA,MAAMA,EAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECAxBC,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,ECI1BC,EAAcC,EAAA,CAACC,EAAQ,IAAKC,EAAS,MAAQ,CAC3C,MAAAC,EAAoB,IAAIC,EAAwB,CACpD,aAAAP,EACA,eAAAC,EACA,KAAMO,EACN,SAAU,CACR,MAAO,CACL,MAAO,CACT,CACF,CAAA,CACD,EAEKC,EAAQ,IAAIC,EAClB,SAASC,GAAU,CACX,MAAAC,EAAcH,EAAM,iBACRH,EAAA,SAAS,MAAM,MAAQM,EACzC,sBAAsBD,CAAO,CAC/B,CAJS,OAAAR,EAAAQ,EAAA,WAMDA,IAEO,IAAIE,EAAW,IAAIC,EAAoBV,EAAOC,EAAQ,GAAI,EAAE,EAAGC,CAAiB,CAGjG,EAxBoB,oKCoBpB,IAAIS,EAAa,KAEjB,OAAAC,EAAc,IAAM,CACdD,GAAO,qBAAqBA,CAAK,EACrCE,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,CAAA,CACzC,EAEDC,EAAU,IAAM,CACdC,EAAO,KAAO,EACd,MAAMC,EAAQlB,EAAYmB,EAAM,MAAOA,EAAM,MAAM,EACnDJ,EAAM,IAAKG,CAAM,EAEE,IAAIE,EAAiB,GAAI,EAGtC,MAAAC,EAAc,SAAS,eAAe,OAAO,EAC/CA,GAAyBA,EAAA,YAAYC,EAAS,UAAU,EAC5D,MAAMC,EAAStB,EAAA,IAAM,CACVqB,EAAA,OAAOP,EAAOE,CAAM,EAC7BA,EAAO,uBAAuB,EAE9BJ,EAAQ,sBAAsBU,CAAM,CAAA,EAJvB,UAORA,GAAA,CACR,EAEDC,EAAe,IAAM,OACnB,QAAQ,IAAI,gBAAgB,EAC5BF,EAAS,MAAM,EACfP,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCA,EAAM,OAAO,MAAMA,EAAOA,EAAM,QAAQ,EACxCO,EAAS,iBAAiB,EAC1B,qBAAqBT,CAAK,EAC1B,MAAMY,EAAKH,EAAS,WAAW,WAAW,OAAO,EACjDG,KAAMC,EAAAD,EAAG,aAAa,oBAAoB,IAApC,MAAAC,EAAuC,cAAY,CAC1D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}